#!/bin/bash
HOMEDIR="$(dirname "$(cd -- "$(dirname "$(readlink -f "$0")")" && (pwd -P 2>/dev/null || pwd))")"

usage() {
  echo "USAGE: ./manager [ --port 3012 ] [ --storage /path/to/storage.json ] [ --key secreKey ] [ --color ] "
  echo "                 [ --reset ]  # set current host as manager"
  echo "                 [ --cluster "server1,server2" ]  # add extra workers on setup"
  exit 1
}

color=0

while (( "$#" )); do
    case $1 in
        --color ) color=1 ;;
        --port ) shift; port=$1 ;;
        --key ) shift; key=$1 ;;
        --storage ) shift; storage=$1 ;;
        --sqlite ) shift; sqlite=$1 ;;
        --reset ) shift; reset=1 ;;
        --cluster ) shift; cluster=$1 ;;
        --help ) usage ;;
        -*) echo "invalid parameter: $1"; usage ;;
    esac
shift
done

if [[ $port ]]; then
  export CRONICLE_WebServer__http_port="$port"
  echo "Custom port set: $port"
fi

if [[ $sqlite ]]; then
  export CRONICLE_sqlite="$(realpath $sqlite)"
  echo "Using custom sqlite db as storage: $sqlite"
fi

if [[ $storage ]]; then
  if [[ -f $storage ]]; then
    export CRONICLE_storage_config="$(realpath $storage)"
    echo "Custom storage set: $(basename $storage)"
  else echo "Error: $storage file doesn't exist"; exit 1
  fi
fi

if [[ $key ]]; then
  export CRONICLE_secret_key=$key
  echo "Custom secret key set: *****"
fi

if [[ $cluster ]]; then
  export CRONICLE_cluster="$cluster"
  echo "Following nodes will be added on setup: $cluster"
fi

# pull data from git if needed
# if [ ! -d data/global ] && [ -v GIT_REPO ]; then
#         git clone $GIT_REPO $HOMEDIR/data
# fi

# check for custom nodejs binary
if [ -f $HOMEDIR/nodejs/bin/node ]; then
      export PATH="$HOMEDIR/nodejs/bin:$PATH"
      echo "using custom node version: $(node -v)"
fi


# setup storage OR make current host the primary manager if needed
if [ "$reset" = 1 ]; then
  node $HOMEDIR/bin/storage-cli.js reset || $HOMEDIR/bin/control.sh setup
else $HOMEDIR/bin/control.sh setup
fi


if [ -f "$HOMEDIR/logs/cronicled.pid" ]; then
  echo 'removing old pid file'
  rm "$HOMEDIR/logs/cronicled.pid"
fi

# try to import data (schedules, users, categories) from backup.json. Ignore server info (to keep current server as manager)
# to generate backup.json: /opt/cronicle/bin/control.sh export > backup.json
if [ -f "$HOMEDIR/data/backup.json" ]; then
  cat "$HOMEDIR/data/backup.json" | grep -v 'global/server' |  $HOMEDIR/bin/control.sh import || echo 'failed to import from backup'
  rm "$HOMEDIR/data/backup.json"
fi

BINARY="node $HOMEDIR/lib/main.js"
# check if bundle exist
if [ -f "$HOMEDIR/bin/cronicle.js" ]; then
    BINARY="$HOMEDIR/bin/cronicle.js"
    # echo "starting bundle"
fi

#$HOMEDIR/bin/control.sh start
exec $BINARY --echo --foreground --manager --color $color



